@typeparam TItem

<div class="container">
    @foreach (var item in Items)
    {
        var Id = Guid.NewGuid();

        <label for="@Id" class="option_item">
            <!-- Check to see if the checkbox needs to be checked or not from the user data by checking if any of the items are already in the SelectedList -->
            @if (SelectedItems.Contains(item))
            {
                <input id="@Id" type="checkbox" class="checkbox" checked @onchange="_ => HandleChange(item)" disabled="@Disabled"/>
                //var i = 5;
            }
            else
            {
                <input id="@Id" type="checkbox" class="checkbox" @onchange="_ => HandleChange(item)" disabled="@Disabled" />
                //var ii = 6;
            }
            <div class="option_inner theme">
                <div class="tickmark"></div>
                <div class="name">
                    @ItemTemplate(item)
                </div>
            </div>
        </label>
    }
</div>



@code {
    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    public List<TItem> SelectedItems { get; set; } = new();

    [Parameter]
    public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }

    [Parameter]
    public string Disabled { get; set; }

    void HandleChange(TItem item)
    {
        if (SelectedItems.Contains(item))
        {
            SelectedItems.Remove(item);
        }
        else
        {
            SelectedItems.Add(item);
        }

        SelectedItemsChanged.InvokeAsync(SelectedItems);
    }
}
