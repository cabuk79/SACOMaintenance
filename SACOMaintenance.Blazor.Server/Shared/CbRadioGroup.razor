@typeparam TItem
@using System.Collections.ObjectModel
@using System.Reflection

<div class="radio-toolbar">
    @* Lop through the items in the list *@
    @foreach(var item in Items)
    {
        @* Get the type of each item *@
        Type type = item.GetType();

        var propItem = type.GetProperty(IdValue);
        var value = propItem.GetValue(item);

        <input type="radio" name="departments" id=@value.ToString() value=@value
                        @onchange="_ => HandleChanged(value.ToString())">

        var propItemValue = type.GetProperty(TextValue);
        var valueValue = propItemValue.GetValue(item);

        @* the aspfor value is to link the label to the radio button so when the label is clicked it marks the radio as checked or unchecked 
            depending on its current state.  The label sets the text for the label *@
         <div class="CbLabel"><CbLabel aspfor=@value.ToString()  label=@valueValue.ToString()></CbLabel></div>
    }
</div>

@code {
    private string id;

    [Parameter]
    public ObservableCollection<TItem> Items { get; set; } 

    [Parameter]
    public string IdValue { get; set; }

    [Parameter]
    public string TextValue { get; set; }

    [Parameter]
    public string RadioGroupName { get; set; }

    [Parameter]
    public EventCallback<string> ChosenIdChanged { get; set; }

    [Parameter]
    public string ChosenId { get; set; }

    void HandleChanged(string changedId)
    {
        ChosenId = changedId;
        ChosenIdChanged.InvokeAsync(ChosenId);
    }
}
