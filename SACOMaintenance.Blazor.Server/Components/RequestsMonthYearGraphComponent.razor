@*@page "/graphmonth"*@
@inject SACOMaintenance.ViewModel.Interfaces.IRequestsGraphDateViewModel requestViewModel
@using Models.DTO
@using ExcelLibs

<h3>Requests by Year and Month</h3>

<RadzenDropDown AllowClear="true" TValue="int" Placeholder="Select Year...."
                Data=@years
                Change=@(args => OnChange(args, "DropDown")) />


<RadzenButton Click=@(args => OnClick()) Text="Export Chart Data" />


<RadzenChart @ref="monthYearChart">
    <RadzenColumnSeries Data="@testList" CategoryProperty="monthName" Title="Month"
                        ValueProperty="monthCount"></RadzenColumnSeries>
    <RadzenColumnOptions Radius="5" />
    <RadzenValueAxis>
        <RadzenGridLines Visible="true" />
        <RadzenAxisTitle Text="Number of Status" />
    </RadzenValueAxis>
</RadzenChart>

@code {

    //public class YearMonthModel
    //{
    //    public int monthCount { get; set; }
    //    public string monthName { get; set; }
    //}

    public void OnClick()
    {
        MaintenanceRequestsGraphsExportToExcel exportChartData = new MaintenanceRequestsGraphsExportToExcel();
        exportChartData.ExportRequestYearMonth(testList);
    }

    public List<int> years = new();

    RadzenChart monthYearChart;

    static int janCount, febCount, marchCount, aprilCount, mayCount, juneCount,
    julyCount, augCount, septCount, octCount, novCount, decCount;

    List<YearMonthModel> testList;

    void OnChange(object value, string name)
    {

        testList = new List<YearMonthModel>();

        int yearChosen = Convert.ToInt32(value);

        janCount = 0; febCount = 0; marchCount = 0; aprilCount = 0; mayCount = 0; juneCount = 0; julyCount = 0;
        augCount = 0; septCount = 0; octCount = 0; novCount = 0; decCount = 0;


        Task.Run(async () => { await requestViewModel.GetRequests(); }).Wait();

        foreach (var item in requestViewModel.MaintReqs)
        {
            var year = DateTime.Parse(item.DateRaised.ToString()).Year;

            if (year == yearChosen)
            {
                var month = DateTime.Parse(item.DateRaised.ToString()).Month;

                switch (month)
                {
                    case 1:
                        janCount++;
                        break;
                    case 2:
                        febCount++;
                        break;
                    case 3:
                        marchCount++;
                        break;
                    case 4:
                        aprilCount++;
                        break;
                    case 5:
                        mayCount++;
                        break;
                    case 6:
                        juneCount++;
                        break;
                    case 7:
                        julyCount++;
                        break;
                    case 8:
                        augCount++;
                        break;
                    case 9:
                        septCount++;
                        break;
                    case 10:
                        octCount++;
                        break;
                    case 11:
                        novCount++;
                        break;
                    case 12:
                        decCount++;
                        break;
                }
            }
        }

        testList.Add(new YearMonthModel { monthCount = janCount, monthName = "January" });
        testList.Add(new YearMonthModel { monthCount = febCount, monthName = "Feburary" });
        testList.Add(new YearMonthModel { monthCount = marchCount, monthName = "March" });
        testList.Add(new YearMonthModel { monthCount = aprilCount, monthName = "April" });
        testList.Add(new YearMonthModel { monthCount = mayCount, monthName = "May" });
        testList.Add(new YearMonthModel { monthCount = juneCount, monthName = "June" });
        testList.Add(new YearMonthModel { monthCount = julyCount, monthName = "July" });
        testList.Add(new YearMonthModel { monthCount = augCount, monthName = "August" });
        testList.Add(new YearMonthModel { monthCount = septCount, monthName = "September" });
        testList.Add(new YearMonthModel { monthCount = octCount, monthName = "October" });
        testList.Add(new YearMonthModel { monthCount = novCount, monthName = "November" });
        testList.Add(new YearMonthModel { monthCount = decCount, monthName = "December" });
    }



    protected override void OnInitialized()
    {
        var startYear = 2019;
        var currentYear = DateTime.Parse(Convert.ToString(DateTime.Now)).Year;
        var yearWorkingWith = startYear;

        while (yearWorkingWith <= currentYear)
        {
            years.Add(yearWorkingWith);
            yearWorkingWith++;
        }

    }


}
