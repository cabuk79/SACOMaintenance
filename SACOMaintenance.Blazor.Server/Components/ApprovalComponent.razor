@using SACOMaintenance.ViewModel.Interfaces
@inject IRequestAuthorisation AuthViewModel
@using SACOMaintenance.Common.ModelDB

<div class="row">
    <div class="col-lg-12">
        <label>Comments/Rejection Reason</label>
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <RadzenTextArea Style="width: 100%" @bind-Value="@CommentReason"></RadzenTextArea>
    </div>
</div>
<div class="row">
    @if (AuthorisationToWorkStatus == false)
    {
        <div class="col-lg-2">
            <button @onclick="@(() => Update("Approved"))" class="btn-outline-primary">Approve</button>
        </div>
        <div class="col-lg-2">
            <button @onclick="@(() => Update("Rejected"))" class="btn-outline-primary">Reject</button>
        </div>
    }
    else
    {
        <div class="col-lg-12">
            <p>Approved to work on the @AuthViewModel.Authorisation.ConfirmationDate</p>
        </div>
    }
</div>



@code {
    [Parameter]
    public int AuthId { get; set; }

    public string CommentReason;

    public bool AuthorisationToWorkStatus;

    protected override async Task OnInitializedAsync()
    {

        Task.Run(async () => { await AuthViewModel.GetSingleAuthRequest(AuthId); }).Wait();

        if (AuthViewModel.Authorisation.Satus == "Approved")
        {
            AuthorisationToWorkStatus = true;
        }
    }

    void Update(string Type)
    {
        AuthViewModel.UpdateAuthorisationAcceptReject(AuthId, Type, CommentReason);
    }
}
