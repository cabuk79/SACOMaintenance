@page "/adduserdialog"
@inject SACOMaintenance.ViewModel.Interfaces.IAssignMaintStaffToRequestViewModel userRequestViewModel
@using SACOMaintenance.Common.ModelDB;
@inject NotificationService NotificationService

<RadzenNotification></RadzenNotification>

<h3>Assign User(s) To Request MAINT-@RequestId</h3>

<div class="flex-container">
    <div>
        Not Assigned<br />
        <RadzenListBox TValue="User" Data=@userRequestViewModel.MaintUsers TextProperty="FullName" Change=@(args => AddName(args)) Style="min-height: 200px; width: 200px;">           
        </RadzenListBox>
    </div>
    <div class="btn-col"> 
        <RadzenButton Text=">" Click=@(args => AddNameToList()) Disabled=@AddBtnEnabled></RadzenButton>
        <RadzenButton Text="<" Click=@(args => RemoveNameFromAssigned()) Disabled=@RemoveBtnEnabled></RadzenButton>
    </div>
    <div>
        Assigned<br />
        <RadzenListBox TValue="User" Data=@userRequestViewModel.MaintUsersAssigned TextProperty="FullName" Change=@(args => RemoveName(args)) Style="min-height: 200px; width: 200px;">
        </RadzenListBox>
    </div>
</div>
<div class="row">
    <div class="col-lg-3">
        <RadzenButton Text="Save" Click=@(args => Save()) Disabled=@SaveBtndisabled></RadzenButton>
    </div>
    <div class="col-lg-3">
        <RadzenButton Text="Close" Click=@(args => ModalCancel())></RadzenButton>
    </div>
</div>



@code {

    [Parameter]
    public int RequestId { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    public bool AddBtnEnabled = true;
    public bool RemoveBtnEnabled = true;
    public bool SaveBtndisabled;

    public bool AssignedHadStaff;

    public User NameSelectedAdd = null;
    public User NameSelectedRemove = null;

    public List<string> NameMaint = new();
    public List<string> Assigned = new();

    private Task ModalCancel()
    {
        userRequestViewModel.MaintUsersAssigned.Clear();
        userRequestViewModel.MaintUsers.Clear();
        return OnClose.InvokeAsync(false);
    }

    protected async override Task OnInitializedAsync()
    {
        userRequestViewModel.LoadSingleRequest(RequestId);
        await userRequestViewModel.LoadAllUsers(1);

        if(userRequestViewModel.MaintUsersAssigned.Count > 0)
        {
            AssignedHadStaff = true;
        }
        else
        {
            AssignedHadStaff = false;
        }

        SetSavebutton();

        //check if users have already been assigned and if so remove from the avaiable list
        for(int i = 0; i < userRequestViewModel.MaintUsers.Count; i++)
        {
            for (int ii = 0; ii < userRequestViewModel.MaintUsersAssigned.Count; ii++)
            {
                if (userRequestViewModel.MaintUsers[i].Id == userRequestViewModel.MaintUsersAssigned[ii].Id)
                {
                    userRequestViewModel.MaintUsers.Remove(userRequestViewModel.MaintUsers[i]);
                }
            }  
        }
    }

    void Save()
    {
        userRequestViewModel.SaveAssignedUsers(RequestId);

        ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Saved",
            Detail = "Staff assigned altered.",
            Duration = 4000
        });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    void SetSavebutton()
    {     
        if(userRequestViewModel.MaintUsersAssigned.Count == 0)
        {
            if(AssignedHadStaff == true)
            {
                SaveBtndisabled = false;
            }
            else
            {
                SaveBtndisabled = true;
            }   
        }
        else
        {
            SaveBtndisabled = false;
        }
    }

    void AddName(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        NameSelectedAdd = (User)str;

        AddBtnEnabled = false;
    }

    void RemoveName(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        NameSelectedRemove = (User)str;

        RemoveBtnEnabled = false;
     
    }

    void AddNameToList()
    {              
        userRequestViewModel.MaintUsersAssigned.Add(NameSelectedAdd);
        userRequestViewModel.MaintUsers.Remove(NameSelectedAdd);
        NameSelectedAdd = null;
        AddBtnEnabled = true;

        SetSavebutton();
    }

    void RemoveNameFromAssigned()
    {
        userRequestViewModel.MaintUsers.Add(NameSelectedRemove);
        userRequestViewModel.MaintUsersAssigned.Remove(NameSelectedRemove);
        NameSelectedRemove = null;
        RemoveBtnEnabled = true;

        SetSavebutton();
    }

}
