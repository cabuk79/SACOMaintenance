@inject SACOMaintenance.ViewModel.Interfaces.IEquipmentListViewModel equipmentListViewModel
@using SACOMaintenance.Common.ModelDB
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

<h3>List of Equipment</h3>

<RadzenGrid Data="@equipmentListViewModel.EquipmentList" AllowColumnResize="true" AllowPaging="true" PageSize="10" 
            AllowSorting="true" FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.Default">
    <Columns>
        <RadzenGridColumn TItem="Equipment" Property="Id" Title="Id" TextAlign="TextAlign.Center"></RadzenGridColumn>
        <RadzenGridColumn TItem="Equipment" Property="Name" Title="Name" Filterable="true"></RadzenGridColumn>
        <RadzenGridColumn TItem="Equipment" Property="Description" Title="Description"></RadzenGridColumn>
        <RadzenGridColumn TItem="Equipment" Property="SerialIdentifierNumber" Title="Serial Number" Filterable="true"></RadzenGridColumn>
        <RadzenGridColumn TItem="Equipment" Property="Comments" Title="Comments">
            <Template Context="data">
               @{ string nonHtmlComment = Regex.Replace(data.Comments, "<.*?>", String.Empty); } @*get rid of the html tags for the table*@
               @nonHtmlComment              
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Equipment" Property="Id" Title="Actions" Sortable="false">
            <Template Context="data">
                <a href="@($"equipment/{data.Id}")" class="btn btn-primary table-btn">
                    <i class="fa fa-pencil-square"></i>
                </a>
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>


@code{

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });
        
        await hubConnection.StartAsync();

        Task.Run(async ()=> { await equipmentListViewModel.LoadAllEquipment(); }).Wait();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            equipmentListViewModel.LoadAllEquipment();
        });
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}