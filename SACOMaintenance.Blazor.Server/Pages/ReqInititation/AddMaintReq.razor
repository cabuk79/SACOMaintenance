@page "/maint-req/add"
@inject SACOMaintenance.ViewModel.Interfaces.IMaintReqNewViewModel AddReqViewModel
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@using SACOMaintenance.Common.ModelDB
@using Microsoft.AspNetCore.SignalR.Client
@using SACOMaintenance.Blazor.Server.Data
@inject SmsService SmsService
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<Common.ModelDB.User> _UserManager

<RadzenNotification></RadzenNotification>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <h1>Add New Maintenance Request</h1>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <RadzenTemplateForm TItem="MaintRequestInitiation" Data="@AddReqViewModel.MaintReq" Submit="@OnSubmit" InvalidSubmit=@OnInvalidSubmit>
                <RadzenFieldset Text="Enter Request Details" Style="border-color: black">
                    <div class="row">
                        <div class="col-lg-12">  
                            
                            <CbRadioGroup Items="AddReqViewModel.Departments" IdValue="Id" TextValue="Name"
                                RadioGroupName="Departments">
                            </CbRadioGroup>

                                @*<InputRadioGroup @bind-Value="@AddReqViewModel.MaintReq.DepartmentId">
                                    @foreach(var option in @AddReqViewModel.Departments)
                                    {                                                                             
                                        <label class="deptRdoLabel"><div class="radioBtn"><InputRadio Value="option.Id"
                                            class="rdoButton" />
                                            </div><label>@option.Name</label></label>                                      
                                    }
                               </InputRadioGroup>*@
                                                                               
                        </div>
                        @AddReqViewModel.MaintReq.DepartmentId
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="row">
                                <div class="col-lg-12">
                                    <RadzenLabel Text="Priority"></RadzenLabel>
                                    <RadzenDropDown AllowClear="true" TValue="int" Style="width: 100%; border-color: black; display: block"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Name="PriorityDrop"
                                                    @bind-Value="@AddReqViewModel.PriorityId" FilterOperator="StringFilterOperator.Contains"
                                                    AllowFiltering="true"
                                                    Data="@AddReqViewModel.Priorities" TextProperty="Name" ValueProperty="Id">
                                        <Template Context="DropDownPrioTemplate">
                                            <div class="row">
                                                <div class="col-lg-1">
                                                    <i class="@((DropDownPrioTemplate as Priority).Icon)"></i>
                                                </div>
                                                <div class="col-lg-5">
                                                    @((DropDownPrioTemplate as Priority).Name)
                                                </div>
                                            </div>
                                        </Template>
                                    </RadzenDropDown>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <RadzenRequiredValidator Component="PriorityDrop" Text="You must selected a priority!" DefaultValue="0" />
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="row">
                                <div class="col-lg-12">
                                    <RadzenLabel Text="Company"></RadzenLabel>
                                    <RadzenDropDown AllowClear="true" TValue="int" Style="width: 100%; border-color: black"
                                                    Context="DropDownCompanyTemplate"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Name="CompanyDrop"
                                                    @bind-Value="@AddReqViewModel.CompanyId" FilterOperator="StringFilterOperator.Contains"
                                                    AllowFiltering="true"
                                                    Data="@AddReqViewModel.Companies" TextProperty="CompanyName" ValueProperty="Id">
                                    </RadzenDropDown>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <RadzenRequiredValidator Component="CompanyDrop" Text="You must selected a company!" DefaultValue="0" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="row">
                                <div class="col-lg-12">
                                    <RadzenLabel Text="Factory"></RadzenLabel>
                                    <RadzenDropDown AllowClear="true" TValue="int" Style="width: 100%; border-color: black"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value="@AddReqViewModel.FactoryId" FilterOperator="StringFilterOperator.Contains"
                                                    AllowFiltering="true" Name="FactoryDrop"
                                                    Data="@AddReqViewModel.Factories" TextProperty="FactoryName" ValueProperty="Id"
                                                    Change=@(args => OnFactoryChange(args, "areasListBox"))>
                                    </RadzenDropDown>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <RadzenRequiredValidator Component="FactoryDrop" Text="You must selected a factory!" DefaultValue="0" />
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="row">
                                <div class="col-lg-12">
                                    @{numberAreasEquipment = AddReqViewModel.Areas.Count();
                                        if (numberAreasEquipment > 0)
                                        {
                                            <RadzenLabel Text="Area"></RadzenLabel>
                                            <RadzenDropDown AllowClear="true" TValue="int"
                                                            Style="width: 100%; border-color: black"
                                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                            @bind-Value="@AddReqViewModel.AreaId"
                                                            FilterOperator="StringFilterOperator.Contains"
                                                            AllowFiltering="true" Name="AreaDrop"
                                                            Data="@AddReqViewModel.Areas" TextProperty="AreaName"
                                                            ValueProperty="Id"
                                                            Change=@(args => OnAreaChange(args, "EquipmentListBox"))>
                                            </RadzenDropDown>
                                            <RadzenLabel Text="If the area is want is not in the list please contact maintenance!" class="drop-down-request"></RadzenLabel>
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <RadzenRequiredValidator Component="AreaDrop" Text="You must selected an area!" DefaultValue="0" />
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="row">
                                <div class="col-lg-12">
                                    @if (AddReqViewModel.Equipment != null)
                                    {
                                        var numberEuipmentItems = AddReqViewModel.Equipment.Count();
                                        if (numberEuipmentItems > 0)
                                        {
                                            <RadzenLabel Text="Equipment"></RadzenLabel>
                                            <RadzenDropDown AllowClear="true" TValue="int" Style="width: 100%; border-color: black"
                                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                            @bind-Value="@AddReqViewModel.EquipmentId" FilterOperator="StringFilterOperator.Contains"
                                                            AllowFiltering="true" Name="EquipmentDrop"
                                                            Data="@AddReqViewModel.Equipment" TextProperty="Name" ValueProperty="Id">
                                            </RadzenDropDown>
                                            <RadzenLabel Text="If the area is want is not in the list please contact maintenance!" class="drop-down-request"></RadzenLabel>
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <RadzenRequiredValidator Component="EquipmentDrop" Text="You must selected  piece of equipment!" DefaultValue="0" />
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                 
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <RadzenHtmlEditor @bind-Value="AddReqViewModel.MaintReq.RequestDetails" Style="height: 500px; border-color: black" Name="DetailsHTML">
                                <RadzenHtmlEditorUndo />
                                <RadzenHtmlEditorRedo />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorBold />
                                <RadzenHtmlEditorItalic />
                                <RadzenHtmlEditorUnderline />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorColor />
                                <RadzenHtmlEditorUnorderedList />
                            </RadzenHtmlEditor>
                            <RadzenRequiredValidator Component="DetailsHTML" Text="You must selected detail what the issue is!" />
                        </div>
                    </div>    
                    <div class="row">
                        <div class="col-lg-12">
                            <RadzenButton ButtonType="ButtonType.Submit" Style="margin: 10px 2px 2px 0px" Icon="save" Text="Save"></RadzenButton>
                        </div>
                    </div>                    
                </RadzenFieldset>
            </RadzenTemplateForm>
        </div>
    </div>
</div>

@code {
    public string DepartmentSelected;
    public int numberAreasEquipment = 0;

    public List<int> DepartmentList = new();

    Common.ModelDB.User objUser = new Common.ModelDB.User();
    string userId { get; set; }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
    }

    async Task OnSubmit()
    {
        await UpdateBook();
    }

    public async Task OnFactoryChange(object value, string name)
    {
        await AddReqViewModel.LoadAreasByFactory();
        StateHasChanged();
    }

    public async Task OnAreaChange(object value, string name)
    {
        await AddReqViewModel.LoadEquipmentByArea();
        StateHasChanged();
    }


    //private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {


        await AddReqViewModel.LoadFactories();
        //hubConnection = new HubConnectionBuilder()
        //    .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
        //    .Build();

        //AddReqViewModel.LoadFactories();

        //await hubConnection.StartAsync();

        //Get the current logged in users ID
        var principal = HttpContextAccessor.HttpContext.User;
        userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);

        ////Get the full details of the current logged in user from the ID
        objUser = await _UserManager.FindByIdAsync(userId);

        //Ge tusder full name and avatar
        userId = objUser.Id;

        AddReqViewModel.MaintReq.UserId = userId;

        DepartmentList.Add(1);
        DepartmentList.Add(2);

    }

    protected async Task UpdateBook()
    {
        //hubConnection = new HubConnectionBuilder()
        //    .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
        //    .Build();

        //await hubConnection.StartAsync();

        AddReqViewModel.AddNewRequest();

        //Check if the prisority is emergency then send text to let someone know
        if (AddReqViewModel.PriorityId == 1)
        {
            Equipment equipName = AddReqViewModel.Equipment.Where(i => i.Id == AddReqViewModel.MaintReq.EquipmentId).FirstOrDefault();

            if (AddReqViewModel.SendTextMessageForEmergencyPriority == true)
            {
                string message = "MAINT-" + AddReqViewModel.NewAddedMaintId.ToString("D4") +
                " has just been added and is either buisness crirtical or danger to life or health.  Please review ASAP!!!\n\n\nEquipment: "
                + equipName.Name + "\n\nDetails:\n" + AddReqViewModel.MaintReq.RequestDetails;

                var respone = SmsService.SendSms("447432 556452", "SACO Maint", message);
                string MessageId = respone.Messages[0].MessageId;
            }
            //var responOne = SmsService.SendSms("447432556452", "SACO Maint", message);
            //string MessageIdTwo = respone.Messages[0].MessageId;
        }

        //if (IsConnected) await SendMessage();

        ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Saved",
            Detail = "New maintenance request saved to database!",
            Duration = 4000
        });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    //Task SendMessage() => hubConnection.SendAsync("SendMessage");

    //public bool IsConnected =>
    //    hubConnection.State == HubConnectionState.Connected;

    //public void Dispose()
    //{
    //    _ = hubConnection.DisposeAsync();
    //}
}