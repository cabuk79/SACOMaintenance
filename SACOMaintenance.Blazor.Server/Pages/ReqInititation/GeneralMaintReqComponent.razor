@using SACOMaintenance.Common.ModelDB
@using SACOMaintenance.DataAccess.Interfaces
@using SACOMaintenance.ViewModel.Interfaces
@inject IGeneralRequest GeneralRequestDataProvider
@inject IGeneralMaintRequestViewModel GeneralViewModel
@using SACOMaintenance.Blazor.Server.Components
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client 

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <RadzenFieldset Text="Control Measures Taken" Style="width: 100%; border-color: black">
                <RadzenTextArea Style="width: 100%; border-color: black"></RadzenTextArea>
            </RadzenFieldset>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <RadzenFieldset Text="PPE Required" Style="width: 100%; border-color: black" AllowCollapse="true">
                <SquareCheckBox Items="GeneralViewModel.ppeList" Context="PPE" @bind-SelectedItems="maintReq.PPEEquipment">
                    <ItemTemplate>
                        <div class="row">
                            <div class="col-lg-12">
                                <img src="@PPE.IconFileLocation" alt="@PPE.PPEName" width="60" height="60" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                @PPE.PPEName
                            </div>
                        </div>
                    </ItemTemplate>
                </SquareCheckBox>
            </RadzenFieldset>
        </div>
    </div>

    <RadzenButton Click="seeppe"></RadzenButton>

    @foreach (var item in maintReq.PPEEquipment)
    {
        <span>@item.Id;</span>
        <span>@item.PPEName;</span>
        <span>@item.MaintRequestInitiations.Count;</span>
    }

    <div class="row">
        <div class="col-lg-12">
            @if (GeneralViewModel.AuthrazationReq == null || GeneralViewModel.AuthrazationReq.Satus == null)
            {
                <RadzenFieldset Text="Authority to Start Work" Style="width: 100%; border-color: black">
                    <RadzenDropDown AllowClear="true" TValue="string" Style="width: 40%; border-color: black"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-value="@GeneralViewModel.UserAuthIdStartWork"
                                    Data="@GeneralViewModel.Users" TextProperty="FullName" ValueProperty="Id">
                        <Template>
                            <div class="row">
                                <div class="col-lg-1">
                                    <img class="avatar-circle" src="@((context as User).AvatarLocation)" width="20" height="20" />
                                </div>
                                <div class="co-lg-11">
                                    @((context as User).FullName)
                                </div>
                            </div>
                        </Template>
                    </RadzenDropDown>
                    <RadzenLabel Text="Choose Person to Authorise"></RadzenLabel>
                    <RadzenButton Text="Request and Save Request Data" Click="@StartWorkRequest" Icon="Save" @oninput="IsReadOnlyChanged"
                                  Style="margin-bottom: 20px; width: 200px"></RadzenButton>
                </RadzenFieldset>
            }
            else
            {
                <RadzenFieldset Text="Authority to Start Work" Style="width: 100%; border-color: black">
                    <div class="row">
                        <div class="col-lg-12">
                            @{
                                foreach (var item in GeneralViewModel.Users)
                                {
                                    if (item.Id == GeneralViewModel.UserAuthIdStartWork)
                                    {
                                        name = item.FirstName + " " + item.LastName;
                                    }
                                }
                            }
                            @if (GeneralViewModel.AuthrazationReq.Satus == "Requested")
                            {
                                <p>
                                    This request approval to work has been @GeneralViewModel.AuthrazationReq.Satus
                                    and is waiting approval from @name on the @GeneralViewModel.AuthrazationReq.RequestedDate.ToLongDateString() at
                                    @GeneralViewModel.AuthrazationReq.RequestedDate.ToLongTimeString()
                                </p>
                            }
                            else if (GeneralViewModel.AuthrazationReq.Satus == "Approved")
                            {
                                <p>
                                    This request approval to work has been @GeneralViewModel.AuthrazationReq.Satus
                                    by @name onthe ***get approval date***
                                </p>
                            }
                            else if (GeneralViewModel.AuthrazationReq.Satus == "Rejected")
                            {
                                <p>
                                    This request approval to work has been @GeneralViewModel.AuthrazationReq.Satus
                                    by @name onthe ***get approval date*** and the reason or comment for this is:

                                </p>
                            }

                        </div>
                    </div>
                    @if (GeneralViewModel.AuthrazationReq.Satus == "Requested" || GeneralViewModel.AuthrazationReq.Satus == "")
                    {
                        <div class="row">
                            <div class="col-lg-3"><RadzenButton Text="Chase Approval"></RadzenButton></div>
                            <div class="col-lg-4"><RadzenButton Text="Choose Another Person for Approval" Click="@DeleteAuthroization"></RadzenButton></div>
                        </div>
                    }

                </RadzenFieldset>
            }
        </div>
    </div>
</div>

@if (GeneralViewModel.AuthrazationReq.Satus == "Approved" && GeneralViewModel.AuthrazationReq != null && GeneralViewModel.genralRequestInfo != null)
{
    <div class="row">
        <div class="col-lg-12">
            <RadzenFieldset Text="Completion of the Works">
                <div class="row">
                    <div class="col-lg-12">
                        <RadzenLabel Text="Details of the work completed"></RadzenLabel>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <RadzenTextArea @bind-Value="GeneralViewModel.genralRequestInfo.DetailOfWorkCompleted" Style="width: 100%; border-color: black"></RadzenTextArea>
                    </div>
                </div>
                <div class="row"><!-- Sign off by the maintenance user for work completed -->
                    <div class="col-lg-12">
                        @{
                            foreach (var item in GeneralViewModel.Users)
                            {
                                if (item.Id == GeneralViewModel.UserAuthIdStartWork)
                                {
                                    name = item.FirstName + " " + item.LastName;
                                }
                            }
                        }
                        @if (GeneralViewModel.CompletedAuth == null
                           || GeneralViewModel.CompletedAuth.Satus == null)
                        {
                            <RadzenDropDown AllowClear="true" TValue="string" Style="width: 40%; border-color: black"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            @bind-value="@GeneralViewModel.MaintenanceUserCompletedId"
                                            Data="@GeneralViewModel.Users" TextProperty="FullName" ValueProperty="Id">
                                <Template>
                                    <div class="row">
                                        <div class="col-lg-1">
                                            <img class="avatar-circle" src="@((context as User).AvatarLocation)" width="20" height="20" />
                                        </div>
                                        <div class="co-lg-11">
                                            @((context as User).FullName)
                                        </div>
                                    </div>
                                </Template>
                            </RadzenDropDown>
                            <RadzenLabel Text="Sign Off on Work Details Completed"></RadzenLabel>
                            <RadzenButton Text="Save" Click="@SignOffWorkCompleted" Icon="Save" @oninput="IsReadOnlyChanged"
                                          Style="margin-bottom: 20px; width: 200px"></RadzenButton>
                        }
                        else
                        {
                            <span>This has been completed.</span>
                        }

                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <RadzenFieldset Text="Sign Off">
                <RadzenTextArea @bind-value="GeneralViewModel.genralRequestInfo.SignOffDetails" Style="width: 100%; border-color: black"></RadzenTextArea>
            </RadzenFieldset>
        </div>
    </div>
}
else
{
    <div class="row">
        <h1>You need approval to work</h1>
    </div>
}

@code {

    public bool ppeIsChecked;

    [Parameter]
    public MaintRequestInitiation maintReq { get; set; }


    [Parameter]
    public bool ReqReadOnly { get; set; }

    [Parameter]
    public EventCallback<bool> ReqReadOnlyChanged { get; set; }

    private HubConnection hubConnection;

    public string name;

    public void seeppe()
    {
        foreach (var item in maintReq.PPEEquipment)
        {
            Console.WriteLine(item.Id + "       " + item.PPEName);
        }
    }

    public void DeleteAuthroization()
    {
        GeneralViewModel.RemoveAuthStartToWorkUser();
        ReqReadOnly = false;
        ReqReadOnlyChanged.InvokeAsync(ReqReadOnly);
        if (IsConnected) SendMessage();
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    private void IsReadOnlyChanged(ChangeEventArgs arg)
    {
        if (ReqReadOnly == true)
        {
            ReqReadOnly = false;
        }
        else if (ReqReadOnly == false)
        {
            ReqReadOnly = true;
        }

    }

    public string colour = "black";

    protected override async Task OnInitializedAsync()
    {

        GeneralViewModel.maintId = maintReq.Id;
        GeneralViewModel.GetGeneralRequest(maintReq.Id);
        await GeneralViewModel.LoadAllPPE();
        GeneralViewModel.LoadStartToworkAuth();
        GeneralViewModel.LoadCompletedUser();

        GeneralViewModel.PPEItemsSelected = GeneralViewModel.ppeList.Where(i => i.MaintRequestInitiations.Count == 1).ToList();


        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
        .Build();

        //hubConnection.On("ReceiveMessage", () =>
        //{
        //    CallLoadData();
        //    StateHasChanged();
        //});

        hubConnection.StartAsync();




    }

    private void SignOffWorkCompleted(MouseEventArgs e)
    {
        GeneralViewModel.AddNewAuthrization("Approved", "Completed");
    }


    private void StartWorkRequest(MouseEventArgs e)
    {
        GeneralViewModel.AddNewAuthrization("Requested", "AuthorityToWork");
        GeneralViewModel.LoadStartToworkAuth();

        if (ReqReadOnly == true)
        {
            ReqReadOnly = false;
        }
        else if (ReqReadOnly == false)
        {
            ReqReadOnly = true;
        }

        ReqReadOnlyChanged.InvokeAsync(ReqReadOnly);
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            GeneralViewModel.GetGeneralRequest(maintReq.Id);
            GeneralViewModel.LoadStartToworkAuth();
        });
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
