@page "/maint-req/auth/{MaintReqID}/{AuthId}"
@inject SACOMaintenance.ViewModel.Interfaces.IMaintRequestFullViewModel MaintRequestViewModel
@using SACOMaintenance.Blazor.Server.Components

    <h3>Maintenance Request</h3>

@MaintReqID

@AuthId

    @*

        UI layout

        General details - section


        Risks - section

        Isolations - section

        Control measures taken - section

        PPE - section

        Approval or Rejection Section - enter details - only part not read only

    *@

    <RadzenFieldset Text="General Details">
        <div class="row">
            <div class="col-lg-4"><RadzenLabel Text="Factory"></RadzenLabel></div>
            <div class="col-lg-4"><RadzenLabel Text="Area"></RadzenLabel></div>
            <div class="col-lg-4"><RadzenLabel Text="Equipment"></RadzenLabel></div>
        </div>
        <div class="row">
            <div class="col-lg-4">@MaintRequestViewModel.maintReqInitation.Factory.FactoryName</div>
            <div class="col-lg-4">@MaintRequestViewModel.maintReqInitation.Area.AreaName</div>
            <div class="col-lg-4">@MaintRequestViewModel.maintReqInitation.Equipment.Name</div>
        </div>
        <div class="row"><RadzenLabel Text="Details"></RadzenLabel></div>
        <div class="row">
            <div class="col-lg-12">
                @MaintRequestViewModel.maintReqInitation.RequestDetails
            </div>
        </div>
    </RadzenFieldset>

    <RadzenFieldset Text="Risks">
        <ul>
            @foreach (var item in MaintRequestViewModel.RiskInfoList)
            {
                foreach (var riskItem in MaintRequestViewModel.Risks)
                {
                    if (riskItem.Id == item.RiskId)
                    {
                        <li>@riskItem.RiskName + "   Risk Level: " + @item.Level</li>
                    }
                }
            }
        </ul>
    </RadzenFieldset>

    <RadzenFieldset Text="Isolations">
        <ul>
            @foreach (var item in MaintRequestViewModel.IsolationByRequest)
            {
                <li>@item.Name</li>
            }
        </ul>
    </RadzenFieldset>

    <RadzenFieldset Text="PPE Items Required">
        <ul>
            @foreach (var item in MaintRequestViewModel.Ppe)
            {
                <li>@item.PPEName</li>
            }
        </ul>
    </RadzenFieldset>
    
    <!-- If the current status is not Id 5 - Waiting Approval to Work then show the sign off component othwise just show it as approved -->
    @if(@MaintRequestViewModel.maintReqInitation.StatusId == 5)
    {
        <RadzenFieldset Text="Approval">
                <ApprovalComponent AuthId="Convert.ToInt32(AuthId)"></ApprovalComponent>
        </RadzenFieldset>
    }
    else
    {
        <RadzenFieldset Text="Approval">
            Approved.
        </RadzenFieldset>
    }

    <!-- If the current status is set to Id 4 - Waiting Sign Off then show the sign off component otherwise just output text that the request has been signed off as completed -->
    @if(@MaintRequestViewModel.maintReqInitation.StatusId == 4)
    {
        <RadzenFieldset Text="Request Sign Off">
            <ApprovalComponent AuthId="Convert.ToInt32(AuthId)"></ApprovalComponent>
        </RadzenFieldset>
    }
    else
    {
        <RadzenFieldset Text="Request Sign Off">
           Approved and closed off.
        </RadzenFieldset>     
    }

    @code {

        [Parameter]
        public string MaintReqID { get; set; }

        [Parameter]
        public string AuthId { get; set; }

        protected override async Task OnInitializedAsync()
        {
            MaintRequestViewModel.GetMaintReqInitation(Convert.ToInt32(MaintReqID));

            Task.Run(async () => { await MaintRequestViewModel.LoadRisks(); }).Wait();
            Task.Run(async () => { await MaintRequestViewModel.LoadMaintRiskData(Convert.ToInt32(MaintReqID)); }).Wait();
            Task.Run(async () => { await MaintRequestViewModel.LoadIsolations(); }).Wait();
            Task.Run(async () => { await MaintRequestViewModel.LoadIsoaltionsByMaint(); }).Wait();
            Task.Run(async () => { await MaintRequestViewModel.LoadPPE(); }).Wait();

            MaintRequestViewModel.IsolationsSelected =
            MaintRequestViewModel.Isolations
            .Where(maint => maint.MaintRequestInitiations.Count == 1).ToList();
        }
    }
