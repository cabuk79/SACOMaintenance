@page "/maintrequests-list"
@inject SACOMaintenance.ViewModel.Interfaces.IRequestInitiationListViewModel maintReqListViewModel
@using SACOMaintenance.Common.ModelDB
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using SACOMaintenance.Blazor.Server.Components
@using SACOMaintenance.Blazor.Server.Services
@using System.Web
@inject IJSRuntime JSRuntime
@using ClosedXML.Excel;
@using System.IO;
@inject MaintenanceRequestsExcel ExcelExport
@inject FileDownloadService FileDownload



<div class="container-fluid">
    <div class="row">
        <div class="col-lg-10">
            <h1>All Maintenance Requests</h1>
        </div>
        <div class="col-lg-2">
            <RadzenButton Click="@ExportExcelFile" Text="Export All Requests"
                          Icon="import_export" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
            <RadzenButton Click="@DownloadToolDrg" Text="Drawing PDF"
                          Icon="import_export" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <RadzenGrid Data="@maintReqListViewModel.requests"
                        SelectionMode="DataGridSelectionMode.Single"
                        @ref="maintGrid" AllowSorting="true"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterMode="FilterMode.Advanced" AllowColumnResize="true"
                        AllowPaging="true">
                <Columns>
                    <RadzenGridColumn TItem="MaintRequestInitiation" Property="Id" Title="Number" Width="100px">
                        <Template Context="data">
                            MAINT-@data.Id
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="MaintRequestInitiation" Property="RequestDetails" Title="Details" Width="250px">
                        <Template Context="data">
                            <p style="white-space:pre-wrap">@((MarkupString)data.RequestDetails)</p>
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="MaintRequestInitiation" Property="DateRaised" Title="Date Raised" Width="100px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="MaintRequestInitiation" Property="Equipment.Name" Title="Equipment Name" Width="80px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="MaintRequestInitiation" Property="Status.StatusName" Title="Status" Width="70px">
                       <Template Context="data">
                           @*@if(data.Status.StatusName == "New") { <i class="fas fa-plus"></i>     @data.Status.StatusName } else { @data.Status.StatusName }*@

                           @switch (data.Status.StatusName)
                           {
                                case "New":
                                    <i class="fas fa-plus"></i> @data.Status.StatusName;
                                    break;
                                case "Closed":
                                    <i class="fas fa-door-closed"></i> @data.Status.StatusName;
                                    break;
                                case "Open":
                                    <i class="fas fa-door-open"></i> @data.Status.StatusName;
                                    break;
                                case "Waiting Sign Off":
                                    <i class="fas fa-file-signature"></i> @data.Status.StatusName;
                                    break;
                                default:
                                    @data.Status.StatusName;
                                    break;
                            }
                        </Template>
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value="@maintReqListViewModel.StatusId" TextProperty="Text"
                                            ValueProperty="Value" Style="width:100%"
                                            Change=@OnChange
                                            Data="@maintReqListViewModel.statusList.Select(t => new { Text = $"{t.StatusName}", Value = t.Id })" />
                        </FilterTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="MaintRequestInitiation" Property="Users" Title="Users Assigned" Width="80px">
                        <Template Context="data">
                            @foreach(var user in data.Users)
                            {
                                <img src="@user.AvatarLocation" width="30px" height="30px" /> @user.FullName;<br />
                            }
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="MaintRequestInitiation" Property="maintReqListViewModel.Id" Title="View" Width="30px"
                                      TextAlign="TextAlign.Center" Filterable="false" Sortable="false">
                        <Template Context="data">
                            <a href="@($"maint-req/full-add/{data.Id}")" class="btn btn-primary table-btn">
                                <i class="fa fa-pencil-square"></i>
                            </a>
                        </Template>
                    </RadzenGridColumn>
                     <RadzenGridColumn TItem="MaintRequestInitiation" Property="maintReqListViewModel.Id" Title="Add Staff" Width="30px"
                                      TextAlign="TextAlign.Center" Filterable="false" Sortable="false">
                        <Template Context="data">
                            <button class="btn btn-success" @onclick="() => AssignStaff(data.Id)">Add Staff</button>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </div>
</div>

@if(ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog" style="border-color: black">
            <div class="modal-content">
                <div class="modal-body">
                    <AssignUserToRequestDialog RequestId="maintReqListViewModel.MaintReqId"></AssignUserToRequestDialog>
                </div>
            </div>
        </div>
    </div>
}

@code{

    public RadzenGrid<MaintRequestInitiation> maintGrid { get; set; }

    private HubConnection hubConnection;

    bool ShowPopup = false;

    void AssignStaff(int maintIdSelected)
    {
        maintReqListViewModel.MaintReqId = maintIdSelected;
        ShowPopup = true;
    }

    void OnChange()
    {

        Task.Run(async () => { await maintReqListViewModel.LoadReqsByStatusId(maintReqListViewModel.StatusId); }).Wait();
        maintGrid.Reload();
        InvokeAsync(StateHasChanged);



        //= maintReqListViewModel.requests
        //.Where(e => e.StatusId == maintReqListViewModel.currentStatus.Id);


        //.Where(e => Convert.ToInt32(maintReqListViewModel.currentStatus) >= 0 ?
        //e.Status == maintReqListViewModel.currentStatus : true);
    }

    public async Task DownloadToolDrg()
    {
        await FileDownload.DownloadPDF(@"C:\Excel Export Test\test.pdf");
    }

    public async Task ExportExcelFile()
    {
        await ExcelExport.ExportListToExcel(maintReqListViewModel.requests);
    }



    protected override async Task OnInitializedAsync()
    {
        await maintReqListViewModel.LoadRequests();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            InvokeAsync(() => StateHasChanged());
            maintGrid.Reload();
        });

        await hubConnection.StartAsync();

        //maintReqListViewModel.LoadRequests();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            maintReqListViewModel.LoadRequests();
        });
    }



    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }



    

   









    public async Task ExportListToExcel()
    {

        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Maint Requests All");

            worksheet.Cell("A1").Value = "All Maintenance Requests";
            worksheet.Cell("A1").Style.Font.Bold = true;
            worksheet.Cell("A1").Style.Font.FontSize = 20;
            worksheet.Range("A1", "E1").Merge(true);

            worksheet.Cell("A2").Value = "Id";
            worksheet.Cell("A2").Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            worksheet.Cell("A2").Style.Font.Bold = true;

            worksheet.Cell("B2").Value = "Details";
            worksheet.Cell("B2").Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            worksheet.Cell("B2").Style.Font.Bold = true;

            worksheet.Cell("C2").Value = "Date Raised";
            worksheet.Cell("C2").Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            worksheet.Cell("C2").Style.Font.Bold = true;

            worksheet.Cell("D2").Value = "Equipment Name";
            worksheet.Cell("D2").Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            worksheet.Cell("D2").Style.Font.Bold = true;

            worksheet.Cell("E2").Value = "Status";
            worksheet.Cell("E2").Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            worksheet.Cell("E2").Style.Font.Bold = true;

            worksheet.Column(1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            worksheet.Column(3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            worksheet.Column(4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            worksheet.Column(5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

            worksheet.Range("A2", "E2").SetAutoFilter();

            //loop through the collection and put the items in columns then increment to the next row
            var i = 3; //declare the row number to start

            //loop through the items in the list
            foreach (var item in maintReqListViewModel.requests)
            {
                worksheet.Cell("A" + i).Value = item.Id;
                worksheet.Cell("B" + i).Value = item.RequestDetails;
                worksheet.Cell("C" + i).Value = item.DateRaised;
                worksheet.Cell("D" + i).Value = item.Equipment.Name;
                worksheet.Cell("E" + i).Value = item.Status.StatusName;
                i++;
            }

            worksheet.Columns("A", "E").AdjustToContents();

            //Save workbook on server
            workbook.SaveAs(@"C:\Excel Export Test\All Maint Requests.xlsx");

            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                var content = stream.ToArray();

                var fileName = "Countries.xlsx";
                await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(content));
                // await JSRuntime.InvokeAsync<object>("BlazorDownloadFile", Convert.ToBase64String(content), fileName);

            }
        }
    }

}
