@page "/maint-req/full-add/{MaintReqID}"
@using SACOMaintenance.Common.ModelDB
@inject SACOMaintenance.ViewModel.Interfaces.IMaintRequestFullViewModel maintReqInitation
@using SACOMaintenance.Blazor.Server.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager


<h3>Maintenance Request @maintReqInitation.maintReqId</h3>

<RadzenButton Click=@(args => maintReqInitation.ExportRequest()) Text="Create Request Form Word"
              Icon="import_export" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>


<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <div class="row">
                <div class="col-lg-12">
                    <div class="row">
                        <div class="col-lg-12">
                            <RadzenFieldset Text="Details" Style="border-color: black">
                                <div class="row">
                                    <div class="col-lg-4"><RadzenLabel Style="font-weight: bold" Text="Factory" /></div>
                                    <div class="col-lg-4"><RadzenLabel Style="font-weight: bold" Text="Area" /></div>
                                    <div class="col-lg-4"><RadzenLabel Style="font-weight: bold" Text="Equipment" /></div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4"><span>@maintReqInitation.factoryName</span></div>
                                    <div class="col-lg-4"><span>@maintReqInitation.areaName</span></div>
                                    <div class="col-lg-4"><span>@maintReqInitation.equipName</span></div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-12">
                                        <div class="row">
                                            <div class="col-lg-12">
                                                <label style="font-weight:bold">Details</label>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-12">
                                                <div class="card text-black" style="width: 100%">
                                                    <div class="card-body">
                                                        <div class="row">
                                                            <div class="col-lg-12">
                                                                @((MarkupString)detailMarkUp)
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </RadzenFieldset>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <RadzenButton Click="@UpdateRisks"></RadzenButton>
                    <RequestRiskChoice @bind-ItemsChosen="maintReqInitation.RiskListsChosen" Risks="maintReqInitation.Risks">
                    </RequestRiskChoice>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <RadzenFieldset Text="Isolations" Style="border-color: black" AllowCollapse="true">
                        <div class="row">
                            <div class="col-lg-12 float-lg-right">
                                <ul>
                                    @foreach (var item in maintReqInitation.IsolationsSelected)
                                    {
                                        <li>
                                            @item.Name
                                        </li>
                                    }
                                </ul>
                                <SquareCheckBox Items="maintReqInitation.Isolations" Context="Isolation"
                                                @bind-SelectedItems="maintReqInitation.IsolationsSelected">
                                    <ItemTemplate>
                                        <div class="row">
                                            <div class="col-lg-12">
                                                <img src="@Isolation.ImageLocation" alt="@Isolation.Name" width="60" height="60" />
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-12">
                                                @Isolation.Name
                                            </div>
                                        </div>
                                    </ItemTemplate>
                                </SquareCheckBox>
                            </div>
                        </div>
                    </RadzenFieldset>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @if (maintReqInitation.maintReqAreaId == 1)  //This ID 1 refers to the plant Area so either plant 1 or 2
            {
                @*<PlantMaintReqComponent maintReqID="maintReqInitation.maintReqId"></PlantMaintReqComponent>*@
            }
            else
            {
                <GeneralMaintReqComponent maintReq="maintReqInitation.maintReqInitation" ReqReadOnly="false" ReqReadOnlyChanged="ReqChangeBool"></GeneralMaintReqComponent>
            }
        </div>
    </div>
</div>

@code {
        [Parameter]
        public string maintReqID { get; set; }

    public RadzenGrid<MaintRequestInitiationRisk> risksGrid { get; set; }

    string detailMarkUp;

    string value = "";
    private bool isReadOnly = false;

    private void ReqChangeBool(bool isReadOnlyPage)
    {
        isReadOnly = isReadOnlyPage;
    }


    public void Testing()
    {

    }

    string riskvalue;


    protected async Task UpdateRisks()
    {
        //maintReqInitation.UpdateMaintReqRisks();
        //CallLoadData();
        //if (IsConnected) await SendMessageSingleReq();
        //await risksGrid.Reload();
        //await InvokeAsync(() => StateHasChanged());
    }

    //Task SendMessageSingleReq() => hubConnection.SendAsync("broadcastHub");

    public bool moveCol = false;

    public enum RiskLevelLetter { H, M, L }

    protected override async Task OnInitializedAsync()
    {
        maintReqInitation.GetMaintReqInitation(Convert.ToInt32(maintReqID));

        //maintReqInitation.LoadRiskLevel(Convert.ToInt32(maintReqID));

        Task.Run(async () => { await maintReqInitation.LoadFactories(); }).Wait();

        Task.Run(async () => { await maintReqInitation.LoadRisks(); }).Wait();

        Task.Run(async () => { await maintReqInitation.LoadMaintRiskData(maintReqInitation.maintReqId); }).Wait();
        Task.Run(async () => { await maintReqInitation.LoadIsolations(); }).Wait();
        Task.Run(async () => { await maintReqInitation.LoadIsoaltionsByMaint(); }).Wait();

        detailMarkUp = maintReqInitation.maintReqDetails;

        Task.Run(async () => { await maintReqInitation.LoadPPE(); }).Wait();

        //Load the selected isolations from the Isolations
        //This is done below so that the genric SquareComboBox will find the isolations
        maintReqInitation.IsolationsSelected =
            maintReqInitation.Isolations
            .Where(maint => maint.MaintRequestInitiations.Count == 1).ToList();

        maintReqInitation.RiskListsChosen =
            maintReqInitation.RiskInfoList.ToList();
        ////Auto update
        //hubConnection = new HubConnectionBuilder()
        //    .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
        //    .Build();

        //hubConnection.On("ReceiveMessageSingleReq", () =>
        //{
        //    CallLoadData();

        //});

        //await hubConnection.StartAsync();
    }
}
    @*enum Choices
    {
        H,
        M,
        L
    };

    //Auto update code
    //TODO: may need to remove this or modiy to suit
    //private HubConnection hubConnection;

    //private void CallLoadData()
    //{
    //    Task.Run(async () =>
    //    {
    //        await maintReqInitation.GetMaintReqInitation(Convert.ToInt32(maintReqID));
    //        await maintReqInitation.LoadMaintRiskData(Convert.ToInt32(maintReqID));
    //    });
    //}

    //public bool IsConnected =>
    //    hubConnection.State == HubConnectionState.Connected;

    //public void Dispose()
    //{
    //    _ = hubConnection.DisposeAsync();
    //}
}*@
