@inject SACOMaintenance.ViewModel.Interfaces.IDashboardViewModel dashboardViewModel
@using SACOMaintenance.Common.ModelDB
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

<div class="card">
    <div class="card-body">
        <RadzenGrid Data="@dashboardViewModel.MaintReqs" @ref="reqGrid" Responsive="false" AllowColumnResize="true" AllowPaging="true" PageSize="5"
                    FilterMode="FilterMode.Advanced" AllowSorting="true">
            <Columns>
                <RadzenGridColumn TItem="MaintRequestInitiation" Property="Id" Title="Id" Width="50px"></RadzenGridColumn>
                <RadzenGridColumn TItem="MaintRequestInitiation" Property="RequestDetails" Title="Details" Width="200px">
                    <Template Context="data">
                        <p style="white-space:pre-wrap">@data.RequestDetails</p>
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="MaintRequestInitiation" Property="DateRaised" Title="Origin Date" Width="100px" Filterable="true"></RadzenGridColumn>
                <RadzenGridColumn TItem="MaintRequestInitiation" Property="maintReqListViewModel.Id" Title="Actions" Width="50px" Sortable="false">
                    <Template Context="data">
                        <a href="@($"maint-req/full-add/{data.Id}")" class="btn btn-primary table-btn">
                            <i class="fa fa-pencil-square"></i>
                        </a>
                    </Template>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    </div>
</div>




        @code{


            private HubConnection hubConnection;
            public RadzenGrid<MaintRequestInitiation> reqGrid { get; set; }

            protected override async Task OnInitializedAsync()
            {
                dashboardViewModel.LoadMaintReqs();

                hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
                    .Build();

                hubConnection.On("ReceiveMessage", () =>
                {
                    CallLoadData();
                    reqGrid.Reload();
                    InvokeAsync(() => StateHasChanged());
                });

                await hubConnection.StartAsync();

                dashboardViewModel.LoadMaintReqs();
            }

            private void CallLoadData()
            {
                Task.Run(async () =>
                {
                    dashboardViewModel.LoadMaintReqs();
                });
            }

            public bool IsConnected =>
                hubConnection.State == HubConnectionState.Connected;

            public void Dispose()
            {
                _ = hubConnection.DisposeAsync();
            }

        }
