@inject SACOMaintenance.ViewModel.Interfaces.IDashboardViewModel dashboardViewModel
@using SACOMaintenance.Common.ModelDB
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

<RadzenGrid Data="@dashboardViewModel.MaintReqsAssignedOpen" @ref="reqGrid" Responsive="false" AllowColumnResize="true">
    <Columns>
        <RadzenGridColumn TItem="MaintRequestInitiation" Property="Id" Title="Id" Width="20"></RadzenGridColumn>
        <RadzenGridColumn TItem="MaintRequestInitiation" Property="RequestDetails" Title="Details">
            <Template Context="data">
                <p style="white-space:pre-wrap">@data.RequestDetails</p>
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="MaintRequestInitiation" Property="DateRaised" Title="Origin Date"></RadzenGridColumn>
        <RadzenGridColumn TItem="MaintRequestInitiation" Property="maintReqListViewModel.Id" Title="Actions">
            <Template Context="data">
                <a href="@($"maint-req/full-add/{data.Id}")" class="btn btn-primary table-btn">
                    <i class="fa fa-pencil-square"></i>
                </a>
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

@code {

    private HubConnection hubConnection;
    public RadzenGrid<MaintRequestInitiation> reqGrid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dashboardViewModel.LoadAssignedOpenReqs();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            reqGrid.Reload();
            InvokeAsync(() => StateHasChanged());
        });

        await hubConnection.StartAsync();

        Task.Run(async () => { await dashboardViewModel.LoadAssignedOpenReqs(); }).Wait();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            dashboardViewModel.LoadAssignedOpenReqs();
        });
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}
