@page "/administration-viewusers"
@using Microsoft.AspNetCore.Identity;
@inject UserManager<Common.ModelDB.User> _UserManager
@*@attribute [Authorize(Roles = "Administrators")]*@

<AuthorizeView Roles="Administrators">
    <Authorized>
        <h3>Users</h3>


        <table class="table">
            <thead>
                <tr>
                    <th>Avatar</th>
                    <th>Id</th>
                    <th>User Name</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in ColUsers)
                {
                    <tr>
                        <td><img class="avatar-circle" src="@user.AvatarLocation" width="40" height="40" /></td>
                        <td>@user.Id.Substring(0, 5) ...</td>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>
                            <!-- Edit the current forecast  -->
                            <button class="btn btn-primary"
                                    @onclick="(() => EditUser(user))">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>




        @if (ShowPopup)
        {
            <!-- This is the popup to create or edit a user -->
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Edit User</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <!-- Edit form for the current user -->
                        <div class="modal-body">
                            <!-- Only show Id if not a new user -->
                            @if (objUser.Id != "")
                            {
                                <label>User Id</label>
                                <p>@objUser.Id</p>
                            }
                            <!-- Only allow edit if a new user -->
                            @if (objUser.Id != "")
                            {
                                <label>Username</label>
                                <p>@objUser.UserName</p>
                            }
                            @*else
                            {
                                <input class="form-control" type="text"
                                       placeholder="UserName" style="padding: 5px; margin: 10px 5px 10px 5px; border-color: black"
                                       @bind="objUser.UserName" />
                            }*@
                            <input class="form-control" style="padding: 5px; margin: 10px 5px 10px 5px; border-color: black" type="text" placeholder="Enter First Name" @bind="objUser.FirstName" />
                            <input class="form-control" style="padding: 5px; margin: 10px 5px 10px 5px; border-color: black" type="text" placeholder="Enter Surname Name" @bind="objUser.LastName" />
                            <input class="form-control" style="padding: 5px; margin: 10px 5px 10px 5px; border-color: black" type="text" placeholder="Email" @bind="objUser.Email" />
                            <input class="form-control" style="padding: 5px; margin: 10px 5px 10px 5px; border-color: black" type="password" placeholder="Password" @bind="objUser.PasswordHash" />
                            <select class="form-control" style="padding: 5px; margin: 10px 5px 10px 5px; border-color: black"
                                    @bind="@CurrentUserRole">
                                @foreach (var option in Options)
                                {
                                    <option value="@option">
                                        @option
                                    </option>
                                }
                            </select>
                            <br /><br />
                            <!-- Button to save the user -->
                            <button class="btn btn-primary"
                                    @onclick="SaveUser">
                                Save
                            </button>
                            <!-- Only show delete button if not a new record -->
                            @if (objUser.Id != "")
                            {
                                <!-- Button to delete the forecast -->
                                <button class="btn btn-danger"
                                        @onclick="DeleteUser">
                                    Delete
                                </button>
                            }
                            <br />
                            <span style="color:red">@strError</span>
                        </div>
                    </div>
                </div>
            </div>
        }
        <button class="btn btn-success" @onclick="AddNewUser">Add User</button>
    </Authorized>
    

    <NotAuthorized>
        <p>Sorry you are not authorised to view this page!!!</p>
    </NotAuthorized>
</AuthorizeView>



@code {


            string ADMINISTRATION_ROLE = "Administrators";

            // Property used to add or edit the currently selected user
            Common.ModelDB.User objUser = new Common.ModelDB.User();
            // Tracks the selected role for the currently selected user
            string CurrentUserRole { get; set; } = "";
            // Collection to display the existing users
            List<Common.ModelDB.User> ColUsers = new List<Common.ModelDB.User>();
            // Options to display in the roles dropdown when editing a user
            List<string> Options = new List<string>() { "General User", "Administrators", "Electrical User", "Mechanial User", "Maintenance Admin", "General Manager" };
            // To hold any possible errors
            string strError = "";
            // To enable showing the Popup
            bool ShowPopup = false;

            protected override async Task OnInitializedAsync()
            {
                var user = await _UserManager.FindByNameAsync("craig.brunton@sacoltd.com");
                if (user != null)
                {
                    // Is Admin@BlazorHelpWebsite.com in administrator role?
                    var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
                    if (!UserResult)
                    {
                        // Put admin in Administrator role
                        await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                }

                GetUsers();
            }

            public void GetUsers()
            {
                // clear any error messages
                strError = "";
                // Collection to hold users
                ColUsers = new List<Common.ModelDB.User>();
                // get users from _UserManager
                var user = _UserManager.Users.Select(x => new Common.ModelDB.User
                {
                    Id = x.Id,
                    FirstName = x.FirstName,
                    LastName = x.LastName,
                    UserName = x.UserName,
                    Email = x.Email,
                    PasswordHash = "*****",
                    AvatarLocation = x.AvatarLocation
                });
                foreach (var item in user)
                {
                    ColUsers.Add(item);
                }
            }

            void AddNewUser()
            {
                // Make new user
                objUser = new Common.ModelDB.User();
                objUser.PasswordHash = "*****";
                // Set Id to blank so we know it is a new record
                objUser.Id = "";
                // Open the Popup
                ShowPopup = true;
            }

            async Task SaveUser()
            {
                try
                {
                    // Is this an existing user
                    if (objUser.Id != "")
                    {
                        //Remove current role so it is not addedtwice

                        // Get the user
                        var user = await _UserManager.FindByIdAsync(objUser.Id);

                        if (CurrentUserRole != "")
                        {
                            foreach (var item in Options)
                            {
                                await _UserManager.RemoveFromRoleAsync(user, item);
                            }

                        }

                        user.FirstName = objUser.FirstName;
                        user.LastName = objUser.LastName;

                        // Update Email
                        user.Email = objUser.Email;
                        await _UserManager.AddToRoleAsync(user, CurrentUserRole);
                        // Update the user
                        await _UserManager.UpdateAsync(user);
                        // Only update password if the current value
                        // is not the default value
                        if (objUser.PasswordHash != "*****")
                        {
                            var resetToken = await _UserManager.GeneratePasswordResetTokenAsync(user);
                            var passworduser = await _UserManager
                                .ResetPasswordAsync(
                                    user,
                                    resetToken,
                                    objUser.PasswordHash);

                            if (!passworduser.Succeeded)
                            {
                                if (passworduser.Errors.FirstOrDefault() != null)
                                {
                                    strError =
                                        passworduser
                                        .Errors
                                        .FirstOrDefault()
                                        .Description;
                                }
                                else
                                {
                                    strError = "Pasword error";
                                }
                                // Keep the popup opened
                                return;
                            }


                        }

                        // Handle Roles
                        // Is user in administrator role?
                        //var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);

                        // Is Administrator role selected but user is not an Administrator?
                        //if ((CurrentUserRole == ADMINISTRATION_ROLE) & (!UserResult))
                        //{
                        // Put admin in Administrator role
                        //    await _UserManager.AddToRoleAsync(user, CurrentUserRole);
                        //}
                        //else
                        //{
                        // Is Administrator role not selected
                        // but user is an Administrator?
                        //   if ((CurrentUserRole != ADMINISTRATION_ROLE) & (UserResult))
                        //   {
                        // Remove user from Administrator role
                        //   await _UserManager.RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                        //   }
                        // }
                    }
                    else
                    {
                        // Insert new user
                        var NewUser =
                            new Common.ModelDB.User
                            {
                                FirstName = objUser.FirstName,
                                LastName = objUser.LastName,
                                UserName = objUser.FirstName.ToLower() + "." + objUser.LastName.ToLower(),
                                Email = objUser.Email,
                                AvatarLocation = @"css/Images/UserProfilePics/blankprofilepic.png"
                    };
                    var CreateResult = await _UserManager.CreateAsync(NewUser, objUser.PasswordHash);
                    if (!CreateResult.Succeeded)
                    {
                        if (CreateResult.Errors.FirstOrDefault() != null)
                        {
                            strError =
                                CreateResult
                                .Errors
                                .FirstOrDefault()
                                .Description;
                        }
                        else
                        {
                            strError = "Create error";
                        }
                        // Keep the popup opened
                        return;
                    }
                    else
                    {
                        // Handle Roles
                        //if (CurrentUserRole == ADMINISTRATION_ROLE)
                        //{
                        // Put admin in Administrator role

                        await _UserManager.AddToRoleAsync(NewUser, CurrentUserRole); // ADMINISTRATION_ROLE);
                                                                                     //}
                    }
                }
            // Close the Popup
            ShowPopup = false;
                // Refresh Users
                GetUsers();
            }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    async Task EditUser(Common.ModelDB.User _IdentityUser)
    {
        // Set the selected user
        // as the current user
        objUser = _IdentityUser;
        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            var userRoles = await _UserManager.GetRolesAsync(user);

            if (userRoles.Count == 0)
            {
                CurrentUserRole = "";
            }
            else
            {
                foreach (var item in userRoles)
                {
                    CurrentUserRole = item;
                }
            }


            // Is user in administrator role?
            //var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);

            //if (UserResult)
            //{
            //    CurrentUserRole = ADMINISTRATION_ROLE;
            //}
            //else
            //{
            //    CurrentUserRole = "General Users";
            //}
        }
        // Open the Popup
        ShowPopup = true;
    }

    async Task DeleteUser()
    {
    }

    void ClosePopup()
    {
        CurrentUserRole = "";
        // Close the Popup
        ShowPopup = false;
    }
}
